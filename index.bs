<pre class='metadata'>
Title: Architecture Decentralized Digital Heritage Network
Shortname: architecture
Level: 1
Status: LD
URL: https://github.com/ErfgoedPod/architecture
Editor: Miel Vander Sande, [meemoo](https://meemoo.be), miel.vandersande@meemoo.be
Abstract: This specification gives a high-level overview of a decentralized digital heritage network using principles from Solid and the Researcher Pod project.
Markup Shorthands: markdown yes
</pre>

<style>
table {
  margin: 25px auto;
  border-collapse: collapse;
  border: 1px solid #eee;
  border-bottom: 2px solid #005A9C;
}
table tr:hover {
  background: #f4f4f4;
}
table tr:hover td {
  color: #555;
}
table th, table td {
  color: #999;
  border: 1px solid #eee;
  padding: 12px 12px;
  border-collapse: collapse;
}
table th {
  background: #005A9C;
  color: #fff;
}
table th.last {
  border-right: none;
}
</style>

# Set of documents

This document is one of the *Decentralized Digital Heritage Network* specifications produced by the ErfgoedPod project by [Netwerk Digitaal Erfgoed](https://netwerkdigitaalerfgoed.nl), [meemoo - Flemish Institute for Archives](https://meemoo.be) and [Ghent University - IDLab](http://idlab.ugent.be):

1. [Decentralized Digital Heritage Network architecture](/architecture/) (this document)
2. [Use cases & Business processes](/usecases/)
3. [Common infrastructure in Cultural Heritage Institutions](/common-setups/)

This project also contributes to the following companion specifications of the [ResearcherPod](https://knows.idlab.ugent.be/projects/mellon) project:

1. [Orchestrator](https://mellonscholarlycommunication.github.io/spec-orchestrator/) 
2. [Data Pod](https://mellonscholarlycommunication.github.io/spec-datapod/)
3. [Rule language](https://mellonscholarlycommunication.github.io/spec-rulelanguage/)
4. [Artefact Lifecycle Event Log](https://mellonscholarlycommunication.github.io/spec-eventlog/)
5. [Notifications](https://mellonscholarlycommunication.github.io/spec-notifications/)
6. [Collector](https://mellonscholarlycommunication.github.io/spec-collector/)

Introduction {#introduction}
============================

The *Decentralized Digital Heritage Network* is a protocol and a set of best practices to establish a sustainable exchange network of digital heritage data between cultural heritage institutions and their services.  
It is an application of the [generic ResearcherPod boilerplate architecture](https://github.com/mellonscholarlycommunication) for decentralized Web networks based on the [[solid-protocol]] and [[!ACTIVITYSTREAMS-VOCABULARY]].
This document lays out the high-level concepts and design of Decentralized Digital Heritage Network.

Overview {#overview}
======================

The decentralized digital heritage network



Issue: create diagram when more is known about the components on mellon side

Actors {#actors}
================

A Decentralized Digital Heritage Network consists of multiple parties that actively participate in the exchange.
Such party is henceforth considered a network <dfn export>actor</dfn>.

All [=actors=] operate under the same protocol, but can differ in purpose.
Every actor in a decentralized digital heritage network is therefore one of the following types:

: <dfn export>Cultural Heritage Institution</dfn>
:: an individual or organisation producing and sharing digital heritage data;
: <dfn export>Service provider</dfn>
:: an organisation consuming and processing digital heritage data to provide a service to other actors in the network;
: <dfn export>Service portal</dfn>
:: an organisation consuming digital heritage data to provide a service to end-users.


Artefacts {#artefacts}
=================

A <dfn export>Digital Heritage Artefact</dfn> is a unit digital heritage data that is the object of exchange between actors.
We distinguish the following types of artefacts:

: <dfn export>Dataset</dfn>
:: The description of a collection of data as defined in [[requirements-datasets#dataset]].
: <dfn export>Dataset description</dfn>
:: Metadata that publishers should provide about their dataset aligned with the machine-readable publication model described in [[requirements-datasets]].
: <dfn export>Actor profile</dfn>
:: A description of an actor that is a member of the network. Often, this is about the organisation acting as [=cultural heritage institution=], [=service provider=], or [=service portal=]. It is used as part of a registration or identification proces.

All artefacts have a lifecycle that consists of a sequence of [=lifecycle events=].
A <dfn export>Lifecycle Event</dfn> is a documented activity that reflect changes to the artefact's presence or positioning on the network.
The occurence of such event can render the artefact eligable for certain services or exchanges. 
For instance, a dataset (= artefact) can only be archived by an archiving service once its registered (= lifecycle event).

<pre class='include'>
path: images/lifecycle.svg
</pre>

We distinguish the following types of lifecycle events:
- `create`: the artefact is created
- `destroy`: the artefact is no longer available
- `update`: a new version of the artefact is available
- `store`: the artefact was stored in a [=Digital Heritage Pod=]
- `announce`: the artefact was promoted over the network
- `register`: a registry (service provider) added the artefact to its service
- `preserve`: an archive (service provider) stored the artefact for long-term preservation 
- `index`: a repository indexed the artefact for search
- `enrich`: the artefact's metadata was enriched
- `link`: a link was added to or from the artefact

Issue: complete the list of lifecycle events.

Components {#components}
========================

## Digital Heritage Pod ## {#pod}

The <dfn export>Digital Heritage Pod</dfn> is a [=Cultural Heritage Institution=]'s main exchange hub for sharing digital heritage information with external [=service provider=] and other [=cultural heritage institutions=].
By design, the [=Digital Heritage Pod=] is a passive component: it can respond to requests for the [=digital heritage artefacts=] it stores, 
but cannot start an interaction with other [=actors=] (see the additional components layed out in [[#participate]] for active participation).  

The Digital Heritage Pod's core fundament is a Solid Data Pod [[solid-protocol#data-pod]] consisting of:
- a <dfn export>datastore</dfn> to store [=digital heritage artefacts=] such as datasets, datasets descriptions, or profiles of organisations;
- a [Web Access Control (WAC) mechanism](https://solid.github.io/specification/protocol#web-access-control) to manage read-write access data pod resources;
- a [Linked Data Notification (LDN) inbox](https://solid.github.io/specification/protocol#notifications) receive Linked Data Notifications [[!LDN]] from other actors;
- a [Linked Data Platform (LDP) subset implementation](https://solid.github.io/specification/protocol#auxiliary-resources-description-resource) to expose the datastore contents and the inbox to other actors.

The [=digital heritage artefacts=] stored in the [=datastore=] originate from two data management systems at the [=cultural heritage institution=]:

- a [Digital Asset Management System](/common-setups#): Software used by the cultural heritage institution to organize, control, and manage collections objects by "tracking all information related to and about" those objects.
- a [Collections Management System](/common-setups#): A centralized system where cultural heritage institutions (efficiently) store, organize, manage, access and distribute their media assets.

Finally, the pod exposes a <dfn export>Artefact Lifecycle Event Log</dfn>: a resource containing an immutable log that records all lifecycle events related to artefacts known to the pod.

<pre class='include'>
path: images/erfgoedpod-Erfgoedpod.svg
</pre>


## Digital Heritage Service Hub ## {#hub}

A <dfn export>Digital Heritage Service Hub</dfn> is a [=service provider=]'s exchange hub to make its services available to other network actors such as [=cultural heritage institutions=] or [=service portals=].
It consists of some of the same interface components as the [=Digital Heritage Pod=]:

- a [Linked Data Notification (LDN) inbox](https://solid.github.io/specification/protocol#notifications) receive Linked Data Notifications [[!LDN]] from other actors;
- a [Linked Data Platform (LDP) subset implementation](https://solid.github.io/specification/protocol#auxiliary-resources-description-resource) to expose the inbox to other actors;
- an [=Artefact Lifecycle Event Log=] resource that publishes and records all lifecycle events related to artefacts processed by the service provider. 

In contrast to the [=Digital Heritage Pod=], it is unspecified what other subcomponents a service hub should provide. Processes that store data, provide security or execute the services are considered a black box.

<pre class='include'>
path: images/erfgoedpod-ServiceHub.svg
</pre>

## Participating in a decentralized Digital Heritage Network ## {#participate}

To actively participate in the network, 
[=actors=] require a few components that enable them to interact with other [=actors=].
For [=cultural heritage institutions=]), 
these components commonly complement a [=digital heritage pod=] or [=Digital Heritage Service Hub=].  

Interations between [=actors=] are always about a [=digital heritage artefact=] and result in a [=lifecycle event=] of that artefact.

- a [Policy](/orchestrator#policy): set of rules that dictates what actions need to be taken when a [=lifecycle event=] occurs. These originate from the digital heritage network participation agreement, possibly amended with procedures imposed by the institution, the discipline, or personal preference.
- an [Orchestrator](/orchestrator#orchestrator): an autonomeous that watches the [=digital heritage pod=] or [=Digital Heritage Service Hub=]'s inbox, and can interpret and execute the [policy](/orchestrator#policy).
- a [Dashboard](/orchestrator#dashboard): a user interface for users to interact with the contents of the [=digital heritage pod=].

<pre class='include'>
path: images/erfgoedpod-BasicSetup.svg
</pre>

## Collection information from a decentralized Digital Heritage Network ## {#collector}

Actors retrieve two types of information from the network:

- lifecycle information: given an object, what actions has it been involved in? eg. added to register X, indexed by Y, or archived by Z.
- descriptive information: given descriptive information, what objects match this description? eg. what Pods have works from Peter Paul Rubens

: Query index  
:: An index that allows for fine-grained search into the contents of the files stored in the Data Pod. 
: Collector    
:: Agent that queries or craws the decentralized network for distributed information targeted by a certain query that needs solving. 
: Filters      
:: Description of the information that needs to be collected.

<pre class=include>
path: images/erfgoedpod-Collector.svg
</pre>


Technical aspects {#technical-aspects}
==========================
## WebID

Simple universal identification mechanism for the Web and a core aspect of Solid. Used in ErfgoedPod to identify acting organisations in the network (eg. a Cultural Heritage Institution, a Registry, ...) 

Example: http://kb.nl#me

## Linked Data Notifications (LDN)

Communication protocol between two actors in the network. Defines an inbox to receive an [[LDN]]. An inbox can be discovered thorugh a `Link` header when requesting a resource, like the WebID. 

Example:

``` http
POST /inbox HTTP/1.1
Host: registry.nde.nl
Content-Type: application/ld+json;profile="https://www.w3.org/ns/activitystreams"
Content-Language: en

{
  "@context": "https://www.w3.org/ns/activitystreams",
  "summary": "KB created dataset.ttl",
  "type": "Create",
  "actor": "http://kb.nl#me",
  "object": "created pod.kb.nl/dataset.ttl"
}

```

## Eventlog

The eventlog is a mandatory log stored in each Pod or Service Hub (eg. Registry) that participates in the network. Lifecycle events of datasets (and other artefacts) are stored there.

Example:

pod.kb.nl/eventlog

```
@prefix lode: <http://linkedevents.org/ontology/>.
@prefix time: <http://www.w3.org/2006/time#>.

_:1 a lode:Event;
    lode:atTime [ 
        a time:Instant; 
        time:inXSDDateTimeStamp  2020-04-12T10:30:00+10:00 . 
    ];
    lode:involvedAgent <http://kb.nl#me>;
    dc:description "Created pod.kb.nl/dataset.ttl".

...
```

``` 
[2020-04-12T10:30:00+10:00] Created pod.kb.nl/dataset.ttl
[2020-04-12T11:30:00+10:00] Created pod.kb.nl/dataset-desc.ttl
[2020-04-12T12:30:00+10:00] Requested registration: pod.kb.nl/dataset.ttl with registry.nde.nl
[2020-04-12T13:30:00+10:00] registry.nde.nl registered pod.kb.nl/dataset.ttl
```

### Rulebook

A rulebook is a configuration file with machine-readable business rules and is the driver for the Orchestrator component. It dictates what actions the Orchestrator should take when it is notified of an event (typically by an incoming Linked Data Notification).


Application to business processes
==========================

This section implements each business process from [[bp-nde]] using the architecture described in this document. 
The process description, the involvement of the [[#components]], and other implementation details are noted in the following template:

: Roles     
:: The different [[bp-nde#roles|actor roles]] that interact with the process.
: Components
:: The [[#components|components]] that are involved.
: Goal             
:: The final successful outcome that completes the process.
: Stakeholders     
:: Anybody or anything with an interest or investment in how the system performs.
: Preconditions    
:: The elements that must be true before a use case can occur.
: Triggers         
:: The events that cause the use case to begin.
: Postconditions   
:: What the system should have completed by the end of the steps.
: Procedure        
:: The process and steps taken to reach the end goal, including the necessary functional requirements and their anticipated behaviors.

In addition to these template, an example HTTP exchange is added for each process.

## (BP1) Initialize a Digital Heritage Pod

<table>
  <tbody>
    <tr>
      <th>Roles</th>
      <td>
      <ul>
      <li>[=Cultural Heritage Object Maintainer=]</li>
      </ul>
      </td>
    </tr>  
    <tr>
      <th>
      Components
      </th>  
      <td>
        <ul>
      <li>[=Dashboard=]
        <li>[=Digital Heritage Pod=]
        </ul>
      </td>
    </tr>
    <tr>
      <th>Goal</th>
      <td>The organization has an operational [=Digital Heritage Pod=].</td>
    </tr>
    <tr>
      <th>Stakeholders</th>
      <td>
      <ul>
      <li>[=Registry's=]
      <li>Other [=Cultural Heritage Institutions=]
      </ul>
      </td>
    </tr>
    <tr>
      <th>Preconditions</th>
      <td>
      A [=Cultural Heritage Object Maintainer=] and a reachable running Solid Data Pod are provided by the [=Cultural Heritage Institution=].
    </tr>
    <tr>
      <th>Triggers</th>
      <td>A [=Cultural Heritage Object Maintainer=] wants to share metadata with Solid networks.</td>
    </tr>
    <tr>
      <th>Postconditions</th>
      <td>A Solid Pod has been initialized as [=Digital Heritage Pod=]. It is running and is reachable by other actors in the Decentralized Digital Heritage Network.</td>
    </tr>
    <tr>
      <th>System</th>
      <td>
      <ol>
      <li>The [=Maintainer=] logs in into the [=Dashboard=] and enters the base URL of a Solid Data Pod.
      <li>The [=Dashboard=] discovers the location of the [=Inbox=] resource by requesting the pod's base URL. If authorization is required, the [=Dashboard=] requests access to the inbox.
      <li>The [=Dashboard=] creates an eventlog resource inside the Solid Data Pod and stores the URI.
      <li>If the event log was created successfully, the [=Dashboard=] informs the [=Maintainer=] that the initialization is complete.
      </ol>
      </tr>
  </tbody>
</table>

**Example HTTP Sequence**

Issue: use a more generic organization domain than kb.nl

<img src="http://www.plantuml.com/plantuml/proxy?src=https://raw.githubusercontent.com/ErfgoedPod/architecture/master/diagrams/init-erfgoedpod.puml" width="800"  />

## (BP2) Register an Orchestrator for a Digital Heritage Pod

<table>
  <tbody>
    <tr>
      <th>Roles</th>
      <td>      
        <ul>
          <li>[=Cultural Heritage Object Maintainer=]</li>
        </ul>
      </td>
    </tr>
    <tr>
      <th>
      Components
      </th>  
      <td>
      <ul>
        <li>[=Dashboard=]
        <li>[=Digital Heritage Pod=]
        <li>[=Orchestrator=]
      </td>
    </tr>
    <tr>
      <th>Goal</th>
      <td>The organization has an operational [=Orchestrator=] connected to its Digital Heritage Pod.</td>
    </tr>
    <tr>
      <th>Stakeholders</th>
      <td>
      <ul>
      <li>[=Registry's=]
      <li>Other [=Cultural Heritage Institutions=]
      </ul>
      </td>
    </tr>
    <tr>
      <th>Preconditions</th>
      <td>
      There is a reachable [=Digital Heritage Pod=] within the [=Cultural Heritage Institution=].</td>
    </tr>
    <tr>
      <th>Triggers</th>
      <td>A [=Cultural Heritage Institution=] wants to share metadata with Solid networks.</td>
    </tr>
    <tr>
      <th>Postconditions</th>
      <td>An [=orchestrator=] is running and is reachable by the institution.</td>
    </tr>
    <tr>
      <th>System</th>
      <td>
      <ol>
      <li>The [=Maintainer=] logs into the [=Dashboard=] and starts the registration of a new orchestrator service.
      <li>The [=Dashboard=] starts an [=Orchestrator=] process locally or uses an [=Orchestrator=] Web service. Once complete, the orchestrator process returns the location of the [=Orchestrator=]'s [=Inbox=] resource.
      <li>The [=Dashboard=] supplies a location of an [=Inbox=] resource - most likely that of a [=Digital Heritage Pod=] - to the [=Orchestrator=] by sending a notification to its inbox. The [=orchestrator=] now watches the supplied [=Inbox=] resources for incoming notifications.
      <li>The [=Dashboard=] informs the [=Maintainer=] that the [=Orchestrator=] service is up and running.
      <li>Next, the [=Maintainer=] configures a list of [=rulebook=] file locations, which are used by the [=Dashboard=] to initialize the [=Orchestrator=].
      <li>The [=Orchestrator=] acknowledges that the [=rulebooks=] are now active. The [=Dashboard=] informs the [=Maintainer=] that this completes the initialization. 
      </ol>
      </tr>
  </tbody>
</table>

**Example HTTP Sequence**

<img src="http://www.plantuml.com/plantuml/proxy?src=https://raw.githubusercontent.com/ErfgoedPod/architecture/master/diagrams/register-with-orchestrator.puml" width="800"  />

## (BP3) Adding a Cultural Heritage Institution to the Registry

<table>
  <tbody>
    <tr>
      <th>Roles</th>
      <td>
        <ul>
        <li>[=Cultural Heritage Object Maintainer=]
        <li>[=Registry=]
        </ul>
      </td>
    </tr>
    <tr>
      <th>Components</th>  
      <td>
        <ul>
        <li>[=Dashboard=] 
        <li>[=Orchestrator=] of [=Cultural Heritage Institution=]
        <li>[=Digital Heritage Pod=] of [=Cultural Heritage Institution=]
        <li>[=Inbox=] of [=Cultural Heritage Institution=]
        <li>[=Inbox=] of [=Registry=]
        <li>[=Orchestrator=] of [=Registry=]
        </ul>
      </td>
    </tr>
    <tr>
      <th>Goal</th>
      <td>The network is aware of the organization: it can be discovered by exploring or querying the [=Registry=].</td>
    </tr>
    <tr>
      <th>Stakeholders</th>
      <td>
        <ul>
        <li>Browser / Service Portals</li>
        <li>Users of the [=Knowledge graph=]</li>
        </ul>
      </td>
    </tr>
    <tr>
      <th>Preconditions</th>
      <td>
        <ul>
          <li>The [=Cultural Heritage Institution=] hosts a [=Organisation Profile=]: a machine actionable profile of the organization with basic details (eg. identifier, name).
          <li>The [=Cultural Heritage Institution=] is not known to the [=Registry=].
          <li>The [=Cultural Heritage Institution=] can be identified and located using a persistent identifier (URI).
          <li>The [=Cultural Heritage Institution=] has a curated list of preferred [=Registry=] instances with a link to their inboxes.
          <li>The list of preferred [=Registry=] instances is added to the ACL of the [=Cultural Heritage Institution=] Data Pod with read permissions.
        </ul>
      </td>
    </tr>
    <tr>
      <th>Triggers</th>
      <td>A [=Cultural Heritage Institution=] wants to join the network</td>
    </tr>
    <tr>
      <th>Postconditions</th>
      <td>[=Organisation Profile=] is added to the search query index of the Registry.  <br>The [=Cultural Heritage Institution=] is aware that it is registered with the [=Registry=]</td>
    </tr>
    <tr>
      <th>System</th>
      <td>
      <ol>
        <li>The [=Maintainer=] uploads or curates the [=Organisation Profile=] using the [=Dashboard=]. The profile is made available through a URI, which can coincide with the institution’s persistent identifier. 
        <li>A [=Maintainer=] of the [=Cultural Heritage Institution=] then uses the [=Dashboard=] to start registration. 
        <li>The [=Orchestrator=] of the  [=Cultural Heritage Institution=] detects the registration event and sends a notification on the institution’s existence to the Inbox of its preferred [=Registry=](s). It contains the organization’s identifier and a link to the profile.
        <li>When notified, the [=Orchestrator=] of the [=Registry=] follows the link to the [=Organisation Profile=] and attempts to download it. 
        <li>*Optional step in case the [=Organisation Profile=] is not openly licensed:* when the [=Registry=] has read access to the [=Organisation Profile=] in the [=Digital Heritage Pod’s=] ACL, it is granted access. Else, the download is refused.
        <li>When downloaded, the [=Orchestrator=] of the [=Registry=] stores the profile in its [=Digital Heritage Pod=] and adds it to the Query Index. 
        <li>After completion, the [=Orchestrator=] of the [=Registry=] sends a notification to the institution’s inbox that the registration was successful.
      </ol>
      </td>
    </tr>
  </tbody>
</table>


**Example HTTP Sequence**

Issue: split sequence with and without orchestrator?

<img src="http://www.plantuml.com/plantuml/proxy?src=https://raw.githubusercontent.com/ErfgoedPod/architecture/master/diagrams/new-organisation-registry.puml" width="800"  />

## (BP4) Adding a new Dataset to the Registry ### {#BP4}

Issue: is there a new version of the dataset or of the dataset description?

<table>
  <tbody>
    <tr>
      <th>Roles</th>
      <td>
      <ul>
        <li>[=Cultural Heritage Object Maintainer=]
        <li>[=Registry=]
      </ul>
      </td>
    </tr>
    <tr>
      <th>
      Components
      </th>  
      <td>
      <ul>
        <li>[=Collection Management System=]
        <li>[=Dashboard=] of [=Cultural Heritage Institution=]
        <li>[=Orchestrator=] [=Cultural Heritage Institution=]
        <li>[=Digital Heritage Pod=] of [=Cultural Heritage Institution=]
        <li>[=Inbox=] of [=Cultural Heritage Institution=]
        <li>[=Inbox=] of [=Registry=]
        <li>[=Orchestrator=] [=Registry=]
        </ul>
      </td>
    </tr>
    <tr>
      <th>Goal</th>
      <td>The [=Dataset=]’s location shows up in search results when querying the [=Registry=] with dataset-level metadata. </td>
    </tr>
    <tr>
      <th>Stakeholders</th>
      <td>
        <ul>
        <li>Other Cultural Heritage Institutions
        <li>Applications, Portals and services
        <li>The Knowledge graph
      </td>
    </tr>
    <tr>
      <th>Preconditions</th>
      <td>
        <ul>
        <li>The [=Dataset=] is not known to the [=Registry=]
        <li>The [=Cultural Heritage Institution=] is known to the [=Registry=]. 
        <li>The [=Cultural Heritage Institution=] has a curated list of preferred [=Registry=] instances with a link to their inboxes.
        <li>The list of preferred [=Registry=] instances is added to the ACL of the [=Cultural Heritage Institution=]'s [=Digital Heritage Pod=] with read permissions.
        </ul>
      </td>
    </tr>
    <tr>
      <th>Triggers</th>
      <td>A new Dataset is ready for publication</td>
    </tr>
    <tr>
      <th>Postconditions</th>
      <td>
        <ul>
            <li>The [=Metadata Dataset=] is added to the search query index of the Registry.
        <li>The [=Cultural Heritage Institution=] is aware that the Dataset is registered with the Registry, because it has confirmation that the Metadata Dataset was accepted and processed.
        </ul>
      </td>
    </tr>
    <tr>
      <th>Procedure</th>
      <td>
          <ol>
            <li>A [=Maintainer=] of the [=Cultural Heritage Institution=] exports a new Dataset from its Collection Management System and stores it in the Data Pod. The Dataset is given a persistent URI through which it is remotely accessible.
            <li>Using the [=Dashboard=], the [=Maintainer=] creates a ‘Metadata Dataset’ profile with a brief description of the Dataset (object descriptions, annotations), which is also stored in the Data Pod.In practice, the Collection Management System will adopt the role of [=Dashboard=] and the creation of the profile happens transparently. 
            <li>The [=Maintainer=] uses the [=Dashboard=] to start the registration of the Dataset.
            <li>The Orchestrator of the [=Cultural Heritage Institution=] detects the dataset registration event and sends a notification on the existence of the published Dataset to the preferred Registry’s Inbox. It contains the identifier of the Dataset and the link to the Metadata Dataset. <br>When notified, the Orchestrator of the [=Registry=] follows the link to the Metadata Dataset and attempts to download it. 
            <li>Optional step in case the Metadata is not open licensed: When the [=Registry=] has reading access to the Metadata Dataset in the Data Pod’s ACL, it is granted access. Else, the download is refused.
            <li>After the Metadata Dataset has been downloaded, the Orchestrator of the [=Registry=] adds the metadata with the Dataset’s location to the Query Index for search. 
            <li>After the indexing has completed, the Orchestrator of the [=Registry=] sends a notification to the institution’s inbox that the Dataset was registered.
          </ol>
      </td>
    </tr>
  </tbody>
</table>

**Example HTTP Sequence**

<img src="http://www.plantuml.com/plantuml/proxy?src=https://raw.githubusercontent.com/ErfgoedPod/architecture/master/diagrams/new-dataset.puml" width="800"  />

## (BP5) Updating a Dataset in the Registry ### {#BP5}

<table>
  <tbody>
    <tr>
      <th>Roles</th>
      <td>
          <ul>
            <li>[=Cultural Heritage Object Maintainer=]
            <li>[=Registry=]
          </ul>
      </td>
    </tr>
    <tr>
      <th>Components</th>  
        <td>
          <ul>
            <li>Collection Management System
            <li>Dashboard [=Cultural Heritage Institution=]
            <li>Orchestrator of [=Cultural Heritage Institution=]
            <li>Data Pod [=Cultural Heritage Institution=]
            <li>Inbox of [=Cultural Heritage Institution=]
            <li>Inbox of [=Registry=]
            <li>Orchestrator of [=Registry=]
          </ul>
      </td>
    </tr>
    <tr>
      <th>Goal</th>
      <td>Reflect latests changes of a registered Dataset in the query results of the [=Registry=]</td>
    </tr>
    <tr>
      <th>Stakeholders</th>
      <td>
        <ul>
          <li>Other [=Cultural Heritage Institution=]
          <li>Browser / Service Portals
          <li>Knowledge Graphs
        </ul>
      </td>
    </tr>
    <tr>
      <th>Preconditions</th>
      <td>
        <ul>
          <li>The [=Cultural Heritage Institution=] is known to the [=Registry=]. 
          <li>The [=Dataset=] is registered with the [=Registry=]
        </ul>
      </td>
    </tr>
    <tr>
      <th>Triggers</th>
      <td>A new version of a [=Dataset=] is ready to be released.</td>
    </tr>
    <tr>
      <th>Postconditions</th>
      <td>
        <ul>
          <li>The [=Registry=] reflects the latest state of its registered [=Datasets=].
          <li>The [=Cultural Heritage Institution=] is aware of the last version in the registry
        </ul>
      </td>
    </tr>
    <tr>
      <th>Procedure</th>
      <td>
        <ol>
          <li>A [=Maintainer=] of the [=Cultural Heritage Institution=] exports a new version of an existing Dataset from its [=Collection Management System=]. 
          <li>The [=Maintainer=] updates the Dataset in the Data Pod using the [=Dashboard=]. An updated [=Metadata Dataset=] is created.In practice, the Collection Management System will adopt the role of [=Dashboard=] and the update happens transparently. 
          <li>The [=Orchestrator=] of the [=Cultural Heritage Institution=] picks up this update event and sends a notification to the Registry’s inbox that the Dataset has been updated.
          <li>The [=Orchestrator=] of the [=Registry=] downloads the updated [=Metadata Dataset=] and adjusts its index entries if the profile introduces changes.
          <li>After completion, the [=Orchestrator=] of the [=Registry=] sends a notification to the institution's inbox that the update was successful.
        </ol>
      </td>
    </tr>
  </tbody>
</table>

**Example HTTP Sequence**

<img src="http://www.plantuml.com/plantuml/proxy?src=https://raw.githubusercontent.com/ErfgoedPod/architecture/master/diagrams/update-dataset.puml" width="800" />

## (BP6) Adding a Registry to the ACL of a Digital Heritage Pod

<table>
  <tbody>
    <tr>
      <th>Roles</th>
      <td>
        <ul>
          <li>[=Cultural Heritage Object Maintainer=]
          <li>[=Registry=]
        </ul>
      </td>
    </tr>
    <tr>
      <th>
      Components
      </th>  
      <td>
                <ul>
        <li>[=Dashboard=] of [=Cultural Heritage Institution=]
        <li>[=Orchestrator=] of [=Cultural Heritage Institution=]
        <li>[=Digital Heritage Pod=] of [=Cultural Heritage Institution=]
        <li>[=Inbox=] of [=Cultural Heritage Institution=]
        <li>[=Inbox=] of [=Registry=]
          </ul>
      </td>
    <tr>
      <th>Goal</th>
      <td>The [=Registry=] can access the necessary data in the [=Digital Heritage Pod=]</td>
    </tr>
    <tr>
      <th>Stakeholders</th>
      <td>/</td>
    </tr>
    <tr>
      <th>Preconditions</th>
      <td>The [=Registry=] does not have access to the [=Digital Heritage Pod=] of the [=Cultural Heritage Institution=]</td>
    </tr>
    <tr>
      <th>Triggers</th>
      <td>The [=Registry=] instance is unknown to the [=Digital Heritage Pod=]</td>
    </tr>
    <tr>
      <th>Postconditions</th>
      <td>The [=Registry=] is added to the ACL list of the [=Digital Heritage Pod=]</td>
    </tr>
    <tr>
      <th>Procedure</th>
      <td>
      <ol>
        <li>The [=Maintainer=] opens the [=Dashboard=] and adds the instance to the list of relevant Registry’s.
        <li>The [=Maintainer=] grants the [=Registry=] (partial) access to the Organization and [=Metadata Dataset=]. 
        <li>The Orchestrator of the [=Cultural Heritage Institution=] picks up this change and sends a notification to the [=Registry=]’s Inbox to inform it on its access control rights.
      </ol>
      </td>
    </tr>
  </tbody>
</table>

**Example HTTP Sequence**

<img src="http://www.plantuml.com/plantuml/proxy?src=https://raw.githubusercontent.com/ErfgoedPod/architecture/master/diagrams/acl.puml" width="800" />

## (BP7) Constructing backlinks between objects of two institutions

Issue: is the orchestrator picking up new links or does it get a notification?

<table>
  <tbody>
    <tr>
      <th>Roles</th>
      <td>
      <ul>
      <li>[=Cultural Heritage Object Maintainer=] A
      <li>[=Cultural Heritage Object Maintainer=] B
      <li>[=Registry=]
      </ul>
    </tr>
    <tr>
    <th>Components</th>
    <td>
      <ul><li>Orchestrator [=Cultural Heritage Institution=] B<li>Data Pod [=Cultural Heritage Institution=] B<li>Inbox [=Cultural Heritage Institution=] B<li>Orchestrator Registry<li>Inbox Registry</ul>
    </td>
    </tr>
    <tr>
      <th>Goal</th>
      <td>Cultural Heritage Institution B adds links to Objects of [=Cultural Heritage Institution=] A after becoming aware of links from Objects of [=Cultural Heritage Institution=] A to a Objects of [=Cultural Heritage Institution=] B</td>
    </tr>
    <tr>
      <th>Stakeholders</th>
      <td>Knowledge Graphs<br>Browser/ Service Portals<br>Users</td>
    </tr>
    <tr>
      <th>Preconditions</th>
      <td>A Dataset of [=Cultural Heritage Institution=] A known to the [=Registry=] contains links to objects of [=Cultural Heritage Institution=] B<br>The links have not been processed by the [=Registry=] yet.</td>
    </tr>
    <tr>
      <th>Triggers</th>
      <td>The [=Registry=] has added or updated a Metadata Dataset in its Query Index</td>
    </tr>
    <tr>
      <th>Postconditions</th>
      <td>Cultural Heritage Institution B has enriched its Datasets with links to Objects of [=Cultural Heritage Institution=] A</td>
    </tr>
    <tr>
      <th>Procedure</th>
      <td>
        <ol>
          <li>The Orchestrator of the [=Registry=] picks up new links in the Query index and selects the known Datasets that contain the Objects targeted by the links. 
          <li>Based on the Dataset’s origin, it sends a notification to the Inbox of [=Cultural Heritage Institution=] B about the found links.
          <li>The Orchestrator of the [=Cultural Heritage Institution=] B picks up this change and generates new backlinks to [=Cultural Heritage Institution=] A, which it stores as a linkset in its Data Pod.
        </ol>
      </td>
    </tr>
  </tbody>
</table>

**Example HTTP Sequence**

<img src="http://www.plantuml.com/plantuml/proxy?src=https://raw.githubusercontent.com/ErfgoedPod/architecture/master/diagrams/update-dataset.puml" width="800" />

## (BP8) Subscribing to a topic

<table>
  <tbody>
    <tr>
      <th>Roles</th>
      <td>
      <ul>
        <li>[=Service Portal Provider=]
        <li>[=Network of Terms=]
        <li>[=Registry=]
      </ul>
      </td>
    </tr>
    <tr>
      <th>Components</th>
      <td>
      <ul>
        <li>[=Service Portal=]
        <li>[=Inbox=] of [=Service Portal=] / [=Network Of Terms=]
        <li>[=Inbox=] of [=Registry=]
      </ul>
      </td>
    </tr>
    <tr>
      <th>Goal</th>
      <td>A [=Service Portal Provider=] or [=Network of Terms=] subscribes to a topic - defined by a query - at a [=Registry=], 
      of which it wants to receive notifications about related artefacts.</td>
    </tr>
    <tr>
      <th>Stakeholders</th>
      <td>
        <ul>
        <li>Users
        </ul>
      </td>
    </tr>
    <tr>
      <th>Preconditions</th>
      <td>
      <ol>
      <li>A [=Registry=] is known to the [=Service Portal=].
      <li>The [=Service Portal=] has a query that defines the subscription topic.
      <li>
      </ol>
      </td>
    </tr>
    <tr>
      <th>Triggers</th>
      <td>A [=Service Portal=] wants to subscribe to artefacts or a certain topic.</td>
    </tr>
    <tr>
      <th>Postconditions</th>
      <td>The [=Service Portal=] is subscribed to a dataset topic in the Registry.</td>
    </tr>
    <tr>
      <th>Procedure</th>
      <td>
        <ol>
          <li>A [=Service Portal=] sends a notification to the [=Registry=] requesting subscription to a dataset topic. 
          This request includes metadata about the topic, ie. a list of [=Terms=] and the inbox of the [=Service Portal=]. 
          <li>The [=Registry=] adds the [=Service Portal=]'s inbox URL to an index per [=term=]. If an index does not exist, the [=Registry=] creates it.
          <li>When the indexing is completed, the [=Registry=] sends a notification to the [=Service Portal=]'s inbox to confirm the subscription.
        </ol>  
      </td>
    </tr>
  </tbody>
</table>

**Example HTTP Sequence**

<img src="http://www.plantuml.com/plantuml/proxy?src=https://raw.githubusercontent.com/ErfgoedPod/architecture/master/diagrams/topic-subscription.puml" width="800" />

## (BP9) Discovering a dataset related to a subscribed topic

<table>
  <tbody>
    <tr>
      <th>Roles</th>
      <td>
      <ul>
        <li>[=Service Portal Provider=]
        <li>[=Registry=]
        <li>[=Cultural Heritage Institution=]
      </ul>
      </td>
    </tr>
    <tr>
      <th>Components</th>
      <td>
      <ul>
        <li>[=Service Portal=]
        <li>[=Inbox=] of [=Service Portal=]
        <li>[=Inbox=] of [=Registry=]
        <li>[=Digital Heritage Pod=] of [=Cultural Heritage Institution=]
      </ul>
      </td>
    </tr>
    <tr>
      <th>Goal</th>
      <td>A [=Service Portal Provider=] retrieved a discovered [=Dataset=] for further processing.</td>
    </tr>
    <tr>
      <th>Stakeholders</th>
      <td>
        <ul>
        <li>Users
        </ul>
      </td>
    </tr>
    <tr>
      <th>Preconditions</th>
      <td>
        <ol>
          <li>The [=Registry=] is known to the [=Service Portal=].
          <li>The [=Service Portal=] is registered to a certain [=term=] at the [=Registry=] .
          <li>The [=Registry=] has new or updated [=Metadata Dataset=] related to the desired topic.
        </ol>
      </td>
    </tr>
    <tr>
      <th>Triggers</th>
      <td>The [=Registry=] has added or updated a [=Metadata Dataset=] in its Query Index.</td>
    </tr>
    <tr>
      <th>Postconditions</th>
      <td>The [=Service Portal=] has retrieved the [=Dataset=].</td>
    </tr>
    <tr>
      <th>Procedure</th>
      <td>
        <ol>
          <li>On the reception of a new or updated [=Metadata Dataset=] (via [[#BP4]] or [[#BP5]]),
          the [=Registry=] cross-checks the list of subscriptions. 
          <li>If a [=Metadata Dataset=] matches a subscription [=term=]],
          the [=Registry=] sends a notification to the inbox of the [=Service Portal=]'s that are subscribed.
          The notification contains a link to the [=Dataset=], which was extracted from the [=Dataset Description=].
          <li>When receiving this notification,
          the [=Service Portal=] extracts the [=Dataset=] link and downloads the [=Dataset=] from the [=Cultural Heritage Institution=]'s [=Digital Heritage Pod=].
          <li>After the download is complete, the [=Service Portal=] processes the [=Dataset=].
        </ol>  
      </td>
    </tr>
  </tbody>
</table>

**Example HTTP Sequence**

<img src="http://www.plantuml.com/plantuml/proxy?src=https://raw.githubusercontent.com/ErfgoedPod/architecture/master/diagrams/dataset-discovery.puml" width="800" />

## (BP10) Discovering a Term source

<table>
  <tbody>
    <tr>
      <th>Roles</th>
      <td>
      <ul>
        <li>[=Network of Terms Provider=]
        <li>[=Registry=]
        <li>[=Cultural Heritage Institution=]
      </ul>
      </td>
    </tr>
    <tr>
      <th>Components</th>
      <td>
      <ul>
        <li>[=Service Portal=]
        <li>[=Inbox=] of [=[=Network of Terms=]
        <li>[=Inbox=] of [=Registry=]
        <li>[=Digital Heritage Pod=] of [=Cultural Heritage Institution=]
      </ul>
      </td>
    </tr>
    <tr>
      <th>Goal</th>
      <td>A [=Network of Terms Provider=] adds a new [=Term Source=] to its index.</td>
    </tr>
    <tr>
      <th>Stakeholders</th>
      <td>
        <ul>
        <li>Users
        </ul>
      </td>
    </tr>
    <tr>
      <th>Preconditions</th>
      <td>
        <ol>
          <li>The [=Registry=] is known to the [=Network of Terms=].
          <li>The [=Network of Terms=] is registered to a certain [=term=] at the [=Registry=] .
          <li>The [=Registry=] has new or updated [=Metadata Term Source=] related to the desired [=term=].
        </ol>
      </td>
    </tr>
    <tr>
      <th>Triggers</th>
      <td>The [=Registry=] has added or updated a [=Metadata Term Source=] in its Query Index.</td>
    </tr>
    <tr>
      <th>Postconditions</th>
      <td>The [=Network of Terms=] has retrieved the [=Term Source=].</td>
    </tr>
    <tr>
      <th>Procedure</th>
      <td>
        <ol>
          <li>On the reception of a new or updated [=Metadata Term Source=] (via [[#BP4]] or [[#BP5]]),
          the [=Registry=] cross-checks the list of subscriptions. 
          <li>If a [=Metadata Term Source=] matches a subscription [=term=]],
          the [=Registry=] sends a notification to the inbox of the [=Service Portal=]'s that are subscribed.
          The notification contains a link to the [=Term Source=], which was extracted from the [=Dataset Description=].
          <li>When receiving this notification,
          the [=Network of Terms=] extracts the [=Term Source=] link and downloads the [=Term Source=] from the [=Cultural Heritage Institution=]'s [=Digital Heritage Pod=].
          <li>After the download is complete, the [=Network of Terms=] processes the [=Term Source=].
        </ol>  
      </td>
    </tr>
  </tbody>
</table>

**Example HTTP Sequence**

<img src="http://www.plantuml.com/plantuml/proxy?src=https://raw.githubusercontent.com/ErfgoedPod/architecture/master/diagrams/sot-discovery.puml" width="800" />



<pre class=biblio>
{
	"solid-oidc": {
		"authors": [
			"Aaron Coburn (Inrupt)",
			"elf Pavlik",
			"Dmitri Zagidulin" 
		],
		"href": "https://solid.github.io/authentication-panel/solid-oidc/",
		"title": "SOLID-OIDC",
		"status": "Editor’s Draft",
		"publisher": "Solid project",
		"deliveredBy": [
			"https://www.w3.org/community/solid/"
		]
	},
	"solid-protocol": {
		"authors": [
			"Sarven Capadisli",
			"Tim Berners-Lee",
			"Ruben Verborgh",
			"Kjetil Kjernsmo",
			"Justin Bingham",
			"Dmitri Zagidulin"
		],
		"href": "https://solidproject.org/TR/protocol/",
		"title": "The Solid Protocol",
		"status": "Editor’s Draft",
		"publisher": "Solid project",
		"deliveredBy": [
			"https://www.w3.org/community/solid/"
		]
	},
	"requirements-datasets": {
		"authors": [
			"David de Boer",
			"Bob Coret"
		],
		"href": "https://netwerk-digitaal-erfgoed.github.io/requirements-datasets",
		"title": "Requirements for Datasets",
		"status": "Living Standard",
		"publisher": "Netwerk Digitaal Erfgoed",
		"deliveredBy": [
			"https://netwerkdigitaalerfgoed.nl"
		]
	},
	"bp-nde": {
		"authors": [
			"Miel Vander Sande"
		],
		"href": "https://erfgoedpod.github.io/usecases",
		"title": "Use Cases & Business Processes Decentralized Digital Heritage Network",
		"status": "Living Standard",
		"publisher": "Netwerk Digitaal Erfgoed & meemoo",
		"deliveredBy": [
			"https://netwerkdigitaalerfgoed.nl"
		]
	}
}
</pre>